"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

exports.__esModule = true;
exports.formatAsInspections = formatAsInspections;

var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));

var path = _interopRequireWildcard(require("path"));

var _util = require("../util");

function formatAsInspections(failures, config) {
  var _getOutputMessage;

  var reportName = config.reportName;
  var output = [];
  var errorCount = 0;
  var warningCount = 0; // group failures per file, instead of reporting each failure individually

  var failuresByRule = failures.reduce(function (acc, f) {
    var ruleName = f.getRuleName();
    if (!acc[ruleName]) acc[ruleName] = {
      ruleName: ruleName,
      messages: []
    };
    acc[ruleName].messages.push(f);
    return acc;
  }, {});
  (0, _values.default)(failuresByRule).forEach(function (result) {
    output.push((0, _util.getOutputMessage)(_util.TeamCityMessages.INSPECTION_TYPE, {
      reportName: reportName,
      ruleName: result.ruleName
    }));
    result.messages.forEach(function (failure) {
      var relativeFilePath = path.relative(process.cwd(), failure.getFileName());
      var filePath = relativeFilePath.replace(/\\/g, '/'); // Ensure slashes on Windows

      var lineAndCharacter = failure.getStartPosition().getLineAndCharacter();
      var lineAndColMessage = "line " + (lineAndCharacter.line + 1) + ", col " + (lineAndCharacter.character + 1);
      var formattedMessage = lineAndColMessage + ", " + failure.getFailure();
      var isError = failure.getRuleSeverity() === 'error';
      var severity = isError ? 'ERROR' : 'WARNING';

      if (isError) {
        errorCount += 1;
      } else {
        warningCount += 1;
      }

      output.push((0, _util.getOutputMessage)(_util.TeamCityMessages.INSPECTION, {
        formattedMessage: formattedMessage,
        filePath: filePath,
        severity: severity,
        ruleName: result.ruleName,
        line: lineAndCharacter.line + 1
      }));
    });
  });
  output.push.apply(output, (0, _util.getOutputMessage)(_util.TeamCityMessages.BUILD_STATISTIC_VALUE, (_getOutputMessage = {}, _getOutputMessage[config.errorStatisticsName] = errorCount, _getOutputMessage[config.warningStatisticsName] = warningCount, _getOutputMessage)));
  return output.join('\n');
}