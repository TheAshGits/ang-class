"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

exports.__esModule = true;
exports.getOutputMessage = getOutputMessage;
exports.loadPackageJson = loadPackageJson;
exports.escapeTeamCityString = escapeTeamCityString;
exports.getUserConfig = getUserConfig;
exports.TeamCityMessages = void 0;

var _extends3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _messages;

var fs = require('fs');

var TeamCityMessages;
exports.TeamCityMessages = TeamCityMessages;

(function (TeamCityMessages) {
  TeamCityMessages["TEST_SUITE_STARTED"] = "testSuiteStarted";
  TeamCityMessages["TEST_SUITE_FINISHED"] = "testSuiteFinished";
  TeamCityMessages["TEST_STARTED"] = "testStarted";
  TeamCityMessages["TEST_FINISHED"] = "testFinished";
  TeamCityMessages["TEST_STD_OUT"] = "testStdOut";
  TeamCityMessages["TEST_STD_ERR"] = "testStdErr";
  TeamCityMessages["TEST_IGNORED"] = "testIgnored";
  TeamCityMessages["TEST_FAILED"] = "testFailed";
  TeamCityMessages["BUILD_STATISTIC_VALUE"] = "buildStatisticValue";
  TeamCityMessages["INSPECTION_TYPE"] = "inspectionType";
  TeamCityMessages["INSPECTION"] = "inspection";
})(TeamCityMessages || (exports.TeamCityMessages = TeamCityMessages = {}));

var messages = (_messages = {}, _messages[TeamCityMessages.TEST_SUITE_STARTED] = function (type, _ref) {
  var report = _ref.report;
  return "##teamcity[" + type + " name='" + report + "']";
}, _messages[TeamCityMessages.TEST_SUITE_FINISHED] = function (type, _ref2) {
  var report = _ref2.report;
  return "##teamcity[" + type + " name='" + report + "']";
}, _messages[TeamCityMessages.TEST_STARTED] = function (type, _ref3) {
  var report = _ref3.report,
      file = _ref3.file;
  return "##teamcity[" + type + " name='" + report + ": " + file + "']";
}, _messages[TeamCityMessages.TEST_FINISHED] = function (type, _ref4) {
  var report = _ref4.report,
      file = _ref4.file;
  return "##teamcity[" + type + " name='" + report + ": " + file + "']";
}, _messages[TeamCityMessages.TEST_FAILED] = function (type, _ref5) {
  var report = _ref5.report,
      file = _ref5.file,
      errors = _ref5.errors;
  return "##teamcity[" + type + " name='" + report + ": " + file + "' message='" + errors + "']";
}, _messages[TeamCityMessages.TEST_STD_OUT] = function (type, _ref6) {
  var report = _ref6.report,
      file = _ref6.file,
      warnings = _ref6.warnings;
  return "##teamcity[" + type + " name='" + report + ": " + file + "' out='warning: " + warnings + "']";
}, _messages[TeamCityMessages.BUILD_STATISTIC_VALUE] = function (type, values) {
  return (0, _keys.default)(values).map(function (key) {
    return "##teamcity[" + type + " key='" + key + "' value='" + values[key] + "']";
  });
}, _messages[TeamCityMessages.INSPECTION_TYPE] = function (type, _ref7) {
  var reportName = _ref7.reportName,
      ruleName = _ref7.ruleName;
  return "##teamcity[" + type + " id='" + ruleName + "' category='" + reportName + "' name='" + ruleName + "' description='" + reportName + "']";
}, _messages[TeamCityMessages.INSPECTION] = function (type, _ref8) {
  var ruleName = _ref8.ruleName,
      formattedMessage = _ref8.formattedMessage,
      filePath = _ref8.filePath,
      line = _ref8.line,
      severity = _ref8.severity;
  return "##teamcity[" + type + " typeId='" + ruleName + "' message='" + formattedMessage + "' file='" + filePath + "' line='" + line + "' SEVERITY='" + severity + "']";
}, _messages);

function getOutputMessage(type, options) {
  if (messages[type]) {
    return messages[type](type, (0, _keys.default)(options).reduce(function (acc, key) {
      var _extends2;

      return (0, _extends3.default)({}, acc, (_extends2 = {}, _extends2[key] = escapeTeamCityString(String(options[key])), _extends2));
    }, {}));
  }

  return '';
}
/**
 * Attempt to load package.json within the current directory.
 * @returns {string} The string representation of package.json
 */


function loadPackageJson() {
  try {
    return fs.readFileSync('package.json');
  } catch (e) {
    // tslint:disable-next-line no-console
    console.warn('Unable to load config from package.json'); // Return the string representation of an empty JSON object,
    // as it will be parsed outside of this method

    return '{}';
  }
}
/**
 * Escape special characters with the respective TeamCity escaping.
 * See below link for list of special characters:
 * https://confluence.jetbrains.com/display/TCD10/Build+Script+Interaction+with+TeamCity
 * @param {string} str The raw message to display in TeamCity build log.
 * @returns {string} An error message formatted for display in TeamCity
 */


function escapeTeamCityString(str) {
  if (!str) {
    return '';
  }

  return str.replace(/\|/g, '||').replace(/'/g, "|'").replace(/\n/g, '|n').replace(/\r/g, '|r').replace(/\u0085/g, '|x') // TeamCity 6
  .replace(/\u2028/g, '|l') // TeamCity 6
  .replace(/\u2029/g, '|p') // TeamCity 6
  .replace(/\[/g, '|[').replace(/\]/g, '|]');
}
/**
 * Determines the config to be used by the respective formatter
 * Config is selected based on the following priority:
 *    1. Any user defined props when running eslint-teamcity
 *    2. package.json settings
 *    3. ENV variables
 *    4. Default value
 * @param {object} propNames Optional config variables that will override all other config settings
 * @returns {object} The final config settings to be used
 */


function getUserConfig(propNames) {
  // Attempt to load package.json from current directory
  var config = JSON.parse(loadPackageJson())['tslint-teamcity-reporter'] || {};
  var reporter = propNames.reporter || config.reporter || process.env.TSLINT_TEAMCITY_REPORTER || 'errors';
  var reportName = propNames.reportName || config['report-name'] || process.env.TSLINT_TEAMCITY_REPORT_NAME || 'TSLint Violations';
  var errorStatisticsName = propNames.errorStatisticsName || config['error-statistics-name'] || process.env.TSLINT_TEAMCITY_ERROR_STATISTICS_NAME || 'TSLint Error Count';
  var warningStatisticsName = propNames.warningStatisticsName || config['warning-statistics-name'] || process.env.TSLINT_TEAMCITY_WARNING_STATISTICS_NAME || 'TSLint Warning Count';
  return {
    reporter: reporter,
    reportName: escapeTeamCityString(reportName),
    errorStatisticsName: escapeTeamCityString(errorStatisticsName),
    warningStatisticsName: escapeTeamCityString(warningStatisticsName)
  };
}