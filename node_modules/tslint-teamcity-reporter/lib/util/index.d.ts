export declare enum TeamCityMessages {
    TEST_SUITE_STARTED = "testSuiteStarted",
    TEST_SUITE_FINISHED = "testSuiteFinished",
    TEST_STARTED = "testStarted",
    TEST_FINISHED = "testFinished",
    TEST_STD_OUT = "testStdOut",
    TEST_STD_ERR = "testStdErr",
    TEST_IGNORED = "testIgnored",
    TEST_FAILED = "testFailed",
    BUILD_STATISTIC_VALUE = "buildStatisticValue",
    INSPECTION_TYPE = "inspectionType",
    INSPECTION = "inspection",
}
export declare type GetOutputMessageOptions = {
    report?: string;
    file?: string;
    errors?: string;
    warnings?: string;
    reportName?: string;
    ruleName?: string;
    formattedMessage?: string;
    filePath?: string;
    line?: number;
    severity?: 'ERROR' | 'WARNING';
    [key: string]: string | number;
};
export declare function getOutputMessage(type: any, options: GetOutputMessageOptions): string | Array<string>;
/**
 * Attempt to load package.json within the current directory.
 * @returns {string} The string representation of package.json
 */
export declare function loadPackageJson(): any;
/**
 * Escape special characters with the respective TeamCity escaping.
 * See below link for list of special characters:
 * https://confluence.jetbrains.com/display/TCD10/Build+Script+Interaction+with+TeamCity
 * @param {string} str The raw message to display in TeamCity build log.
 * @returns {string} An error message formatted for display in TeamCity
 */
export declare function escapeTeamCityString(str: any): any;
/**
 * Determines the config to be used by the respective formatter
 * Config is selected based on the following priority:
 *    1. Any user defined props when running eslint-teamcity
 *    2. package.json settings
 *    3. ENV variables
 *    4. Default value
 * @param {object} propNames Optional config variables that will override all other config settings
 * @returns {object} The final config settings to be used
 */
export declare function getUserConfig(propNames: any): {
    [key: string]: string;
};
