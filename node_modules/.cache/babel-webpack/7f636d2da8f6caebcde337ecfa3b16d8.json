{"ast":null,"code":"import _createClass from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport { InjectionToken, Injectable, Inject, Injector, NgModule } from '@angular/core';\nimport { APP_BASE_HREF, DOCUMENT } from '@angular/common';\nimport * as ɵngcc0 from '@angular/core';\nvar COOKIE_OPTIONS = new InjectionToken('COOKIE_OPTIONS');\nvar COOKIE_WRITER = new InjectionToken('COOKIE_WRITER'); // tslint:disable-next-line:no-any\n\nfunction isNil(obj) {\n  return obj === undefined || obj === null;\n} // tslint:disable-next-line:no-any\n\n\nfunction isPresent(obj) {\n  return !isNil(obj);\n} // tslint:disable-next-line:no-any\n\n\nfunction isString(obj) {\n  return typeof obj === 'string';\n} // noinspection JSUnusedGlobalSymbols\n// tslint:disable-next-line:no-any\n\n\nfunction isEmpty(value) {\n  if (isNil(value)) {\n    return true;\n  }\n\n  if (value === {}) {\n    return true;\n  }\n\n  if (Array.isArray(value) && value.length === 0) {\n    return true;\n  }\n\n  if (typeof value !== 'boolean' && !value) {\n    return true;\n  } // noinspection RedundantIfStatementJS\n\n\n  if (Object.keys(value).length === 0 && value.constructor === Object) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergeOptions(oldOptions, newOptions) {\n  if (!newOptions) {\n    return oldOptions;\n  }\n\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    sameSite: isPresent(newOptions.sameSite) ? newOptions.sameSite : oldOptions.sameSite,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded\n  };\n}\n\nfunction parseCookieString(currentCookieString) {\n  var lastCookies = {};\n  var lastCookieString = '';\n  var cookieArray;\n  var cookie;\n  var i;\n  var index;\n  var name;\n\n  if (currentCookieString !== lastCookieString) {\n    lastCookieString = currentCookieString;\n    cookieArray = lastCookieString.split('; ');\n    lastCookies = {};\n\n    for (i = 0; i < cookieArray.length; i++) {\n      cookie = cookieArray[i];\n      index = cookie.indexOf('=');\n\n      if (index > 0) {\n        // ignore nameless cookies\n        name = safeDecodeURIComponent(cookie.substring(0, index)); // the first value that is seen for a cookie is the most\n        // specific one.  values for the same cookie name that\n        // follow are for less specific paths.\n\n        if (isNil(lastCookies[name])) {\n          lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n        }\n      }\n    }\n  }\n\n  return lastCookies;\n}\n\nfunction buildCookieString(name, value, options) {\n  var expires = options === null || options === void 0 ? void 0 : options.expires;\n  var val;\n\n  if (isNil(value)) {\n    expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n    val = '';\n  } else {\n    val = value;\n  }\n\n  if (isString(expires)) {\n    expires = new Date(expires);\n  }\n\n  var cookieValue = (options === null || options === void 0 ? void 0 : options.storeUnencoded) ? value : encodeURIComponent(val);\n  var str = encodeURIComponent(name) + '=' + cookieValue;\n  str += (options === null || options === void 0 ? void 0 : options.path) ? ';path=' + options.path : '';\n  str += (options === null || options === void 0 ? void 0 : options.domain) ? ';domain=' + options.domain : '';\n  str += expires ? ';expires=' + expires.toUTCString() : '';\n  str += (options === null || options === void 0 ? void 0 : options.sameSite) ? '; SameSite=' + options.sameSite : '';\n  str += (options === null || options === void 0 ? void 0 : options.secure) ? ';secure' : '';\n  str += (options === null || options === void 0 ? void 0 : options.httpOnly) ? '; HttpOnly' : ''; // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n  // - 300 cookies\n  // - 20 cookies per unique domain\n  // - 4096 bytes per cookie\n\n  var cookieLength = str.length + 1;\n\n  if (cookieLength > 4096) {\n    console.log(\"Cookie '\".concat(name, \"' possibly not set or overflowed because it was too large (\").concat(cookieLength, \" > 4096 bytes)!\"));\n  }\n\n  return str;\n}\n\nfunction safeDecodeURIComponent(str) {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n\nvar CookieOptionsProvider = function CookieOptionsProvider() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var injector = arguments.length > 1 ? arguments[1] : undefined;\n\n  _classCallCheck(this, CookieOptionsProvider);\n\n  this.injector = injector;\n  this.defaultOptions = {\n    path: this.injector.get(APP_BASE_HREF, '/'),\n    domain: undefined,\n    expires: undefined,\n    secure: false,\n    httpOnly: false\n  };\n  this.options = mergeOptions(this.defaultOptions, options);\n};\n\nCookieOptionsProvider.ɵfac = function CookieOptionsProvider_Factory(t) {\n  return new (t || CookieOptionsProvider)(ɵngcc0.ɵɵinject(COOKIE_OPTIONS), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nCookieOptionsProvider.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CookieOptionsProvider,\n  factory: CookieOptionsProvider.ɵfac\n});\n\nCookieOptionsProvider.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [COOKIE_OPTIONS]\n    }]\n  }, {\n    type: Injector\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieOptionsProvider, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [COOKIE_OPTIONS]\n      }]\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n\nvar CookieService = /*#__PURE__*/function () {\n  function CookieService(document, optionsProvider, cookieWriterService) {\n    _classCallCheck(this, CookieService);\n\n    this.document = document;\n    this.optionsProvider = optionsProvider;\n    this.cookieWriterService = cookieWriterService;\n    this.options = this.optionsProvider.options;\n  }\n  /**\n   * @description\n   * Returns if the given cookie key exists or not.\n   *\n   * @param key Id to use for lookup.\n   * @returns true if key exists, otherwise false.\n   */\n\n\n  _createClass(CookieService, [{\n    key: \"hasKey\",\n    value: function hasKey(key) {\n      var value = this.get(key);\n      return isPresent(value);\n    }\n    /**\n     * @description\n     * Returns the value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Raw cookie value.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var _a;\n\n      return (_a = this.getAll()) === null || _a === void 0 ? void 0 : _a[key];\n    }\n    /**\n     * @description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param key Id to use for lookup.\n     * @returns Deserialized cookie value.\n     */\n\n  }, {\n    key: \"getObject\",\n    value: function getObject(key) {\n      var value = this.get(key);\n\n      if (isNil(value)) {\n        return undefined;\n      } else if (value === '') {\n        return {};\n      }\n\n      return JSON.parse(value);\n    }\n    /**\n     * @description\n     * Returns a key value object with all the cookies.\n     *\n     * @returns All cookies\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var cookieString = this.cookieWriterService.readAllAsString();\n      return parseCookieString(cookieString);\n    }\n    /**\n     * @description\n     * Sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Raw value to be stored.\n     * @param options (Optional) Options object.\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(key, value, options) {\n      var opts = mergeOptions(this.options, options);\n      this.cookieWriterService.write(key, value, opts);\n    }\n    /**\n     * @description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param key Id for the `value`.\n     * @param value Value to be stored.\n     * @param options (Optional) Options object.\n     */\n\n  }, {\n    key: \"putObject\",\n    value: function putObject(key, value, options) {\n      this.put(key, JSON.stringify(value), options);\n    }\n    /**\n     * @description\n     * Remove given cookie.\n     *\n     * @param key Id of the key-value pair to delete.\n     * @param options (Optional) Options object.\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(key, options) {\n      this.put(key, undefined, options);\n    }\n    /**\n     * @description\n     * Remove all cookies.\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function removeAll(options) {\n      var _this = this;\n\n      var cookies = this.getAll();\n      Object.keys(cookies).forEach(function (key) {\n        return _this.remove(key, options);\n      });\n    }\n  }]);\n\n  return CookieService;\n}();\n\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(CookieOptionsProvider), ɵngcc0.ɵɵinject(COOKIE_WRITER));\n};\n\nCookieService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CookieService,\n  factory: CookieService.ɵfac\n});\n\nCookieService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: CookieOptionsProvider\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [COOKIE_WRITER]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: CookieOptionsProvider\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [COOKIE_WRITER]\n      }]\n    }];\n  }, null);\n})();\n\nvar CookieWriterService = /*#__PURE__*/function () {\n  function CookieWriterService(document) {\n    _classCallCheck(this, CookieWriterService);\n\n    this.document = document;\n  }\n\n  _createClass(CookieWriterService, [{\n    key: \"readAllAsString\",\n    value: function readAllAsString() {\n      return this.document.cookie || '';\n    }\n  }, {\n    key: \"write\",\n    value: function write(name, value, options) {\n      this.document.cookie = buildCookieString(name, value, options);\n    }\n  }]);\n\n  return CookieWriterService;\n}();\n\nCookieWriterService.ɵfac = function CookieWriterService_Factory(t) {\n  return new (t || CookieWriterService)(ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nCookieWriterService.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: CookieWriterService,\n  factory: CookieWriterService.ɵfac\n});\n\nCookieWriterService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieWriterService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nfunction cookieServiceFactory(document, cookieOptionsProvider, cookieWriterService) {\n  return new CookieService(document, cookieOptionsProvider, cookieWriterService);\n}\n\nvar CookieModule = /*#__PURE__*/function () {\n  function CookieModule() {\n    _classCallCheck(this, CookieModule);\n  }\n\n  _createClass(CookieModule, null, [{\n    key: \"forRoot\",\n\n    /**\n     * Use this method in your root module to provide the CookieService\n     */\n    value: function forRoot() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: CookieModule,\n        providers: [{\n          provide: COOKIE_OPTIONS,\n          useValue: options\n        }, {\n          provide: COOKIE_WRITER,\n          useClass: CookieWriterService\n        }, {\n          provide: CookieService,\n          useFactory: cookieServiceFactory,\n          deps: [DOCUMENT, CookieOptionsProvider, COOKIE_WRITER]\n        }]\n      };\n    }\n    /**\n     * Use this method in your other (non root) modules to import the directive/pipe\n     */\n\n  }, {\n    key: \"forChild\",\n    value: function forChild() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return CookieModule.forRoot(options);\n    }\n  }]);\n\n  return CookieModule;\n}();\n\nCookieModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CookieModule\n});\nCookieModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function CookieModule_Factory(t) {\n    return new (t || CookieModule)();\n  },\n  providers: [CookieOptionsProvider]\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(CookieModule, [{\n    type: NgModule,\n    args: [{\n      providers: [CookieOptionsProvider]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-cookie\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { COOKIE_OPTIONS, COOKIE_WRITER, CookieModule, CookieOptionsProvider, CookieService, CookieWriterService, buildCookieString, cookieServiceFactory, isEmpty, isNil, isPresent, isString, mergeOptions, parseCookieString, safeDecodeURIComponent };","map":{"version":3,"sources":["../../../projects/ngx-cookie/src/lib/tokens.ts","../../../projects/ngx-cookie/src/lib/utils.ts","../../../projects/ngx-cookie/src/lib/cookie-options.provider.ts","../../../projects/ngx-cookie/src/lib/cookie.service.ts","../../../projects/ngx-cookie/src/lib/cookie-writer.service.ts","../../../projects/ngx-cookie/src/lib/cookie.factory.ts","../../../projects/ngx-cookie/src/lib/cookie.module.ts","../../../projects/ngx-cookie/src/public-api.ts","../../../projects/ngx-cookie/src/ngx-cookie.ts"],"names":[],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nimport { CookieOptions, ICookieWriterService } from './cookie.model';\n\nexport const COOKIE_OPTIONS = new InjectionToken<CookieOptions>('COOKIE_OPTIONS');\nexport const COOKIE_WRITER = new InjectionToken<ICookieWriterService>('COOKIE_WRITER');\n","import { CookieDict, CookieOptions } from './cookie.model';\n\n// tslint:disable-next-line:no-any\nexport function isNil(obj: any): boolean {\n  return obj === undefined || obj === null;\n}\n\n// tslint:disable-next-line:no-any\nexport function isPresent(obj: any): boolean {\n  return !isNil(obj);\n}\n\n// tslint:disable-next-line:no-any\nexport function isString(obj: any): obj is string {\n  return typeof obj === 'string';\n}\n\n// noinspection JSUnusedGlobalSymbols\n// tslint:disable-next-line:no-any\nexport function isEmpty(value: any): boolean {\n  if (isNil(value)) {\n    return true;\n  }\n  if (value === {}) {\n    return true;\n  }\n  if (Array.isArray(value) && value.length === 0) {\n    return true;\n  }\n  if (typeof value !== 'boolean' && !value) {\n    return true;\n  }\n  // noinspection RedundantIfStatementJS\n  if (Object.keys(value).length === 0 && value.constructor === Object) {\n    return true;\n  }\n  return false;\n}\n\nexport function mergeOptions(oldOptions: CookieOptions, newOptions?: CookieOptions): CookieOptions {\n  if (!newOptions) {\n    return oldOptions;\n  }\n  return {\n    path: isPresent(newOptions.path) ? newOptions.path : oldOptions.path,\n    domain: isPresent(newOptions.domain) ? newOptions.domain : oldOptions.domain,\n    expires: isPresent(newOptions.expires) ? newOptions.expires : oldOptions.expires,\n    secure: isPresent(newOptions.secure) ? newOptions.secure : oldOptions.secure,\n    sameSite: isPresent(newOptions.sameSite) ? newOptions.sameSite : oldOptions.sameSite,\n    httpOnly: isPresent(newOptions.httpOnly) ? newOptions.httpOnly : oldOptions.httpOnly,\n    storeUnencoded: isPresent(newOptions.storeUnencoded) ? newOptions.storeUnencoded : oldOptions.storeUnencoded\n  };\n}\n\nexport function parseCookieString(currentCookieString: string): CookieDict {\n  let lastCookies: CookieDict = {};\n  let lastCookieString = '';\n  let cookieArray: string[];\n  let cookie: string;\n  let i: number;\n  let index: number;\n  let name: string;\n  if (currentCookieString !== lastCookieString) {\n    lastCookieString = currentCookieString;\n    cookieArray = lastCookieString.split('; ');\n    lastCookies = {};\n    for (i = 0; i < cookieArray.length; i++) {\n      cookie = cookieArray[i];\n      index = cookie.indexOf('=');\n      if (index > 0) {  // ignore nameless cookies\n        name = safeDecodeURIComponent(cookie.substring(0, index));\n        // the first value that is seen for a cookie is the most\n        // specific one.  values for the same cookie name that\n        // follow are for less specific paths.\n        if (isNil((lastCookies)[name])) {\n          lastCookies[name] = safeDecodeURIComponent(cookie.substring(index + 1));\n        }\n      }\n    }\n  }\n  return lastCookies;\n}\n\nexport function buildCookieString(name: string, value: string | undefined, options?: CookieOptions): string {\n  let expires: string | Date | undefined = options?.expires;\n  let val: string;\n  if (isNil(value)) {\n    expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n    val = '';\n  } else {\n    val = value as string;\n  }\n  if (isString(expires)) {\n    expires = new Date(expires);\n  }\n  const cookieValue = options?.storeUnencoded ? value : encodeURIComponent(val);\n  let str = encodeURIComponent(name) + '=' + cookieValue;\n  str += options?.path ? ';path=' + options.path : '';\n  str += options?.domain ? ';domain=' + options.domain : '';\n  str += expires ? ';expires=' + expires.toUTCString() : '';\n  str += options?.sameSite ? '; SameSite=' + options.sameSite : '';\n  str += options?.secure ? ';secure' : '';\n  str += options?.httpOnly ? '; HttpOnly' : '';\n\n  // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n  // - 300 cookies\n  // - 20 cookies per unique domain\n  // - 4096 bytes per cookie\n  const cookieLength = str.length + 1;\n  if (cookieLength > 4096) {\n    console.log(`Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\n  }\n  return str;\n}\n\nexport function safeDecodeURIComponent(str: string): string {\n  try {\n    return decodeURIComponent(str);\n  } catch (e) {\n    return str;\n  }\n}\n","import { APP_BASE_HREF } from '@angular/common';\nimport { Inject, Injectable, Injector } from '@angular/core';\n\nimport { CookieOptions } from './cookie.model';\nimport { COOKIE_OPTIONS } from './tokens';\nimport { mergeOptions } from './utils';\n\n@Injectable()\nexport class CookieOptionsProvider {\n\n  readonly options: CookieOptions;\n  private readonly defaultOptions: CookieOptions;\n\n  constructor(@Inject(COOKIE_OPTIONS) options: CookieOptions = {},\n              private injector: Injector) {\n    this.defaultOptions = {\n      path: this.injector.get(APP_BASE_HREF, '/'),\n      domain: undefined,\n      expires: undefined,\n      secure: false,\n      httpOnly: false\n    };\n    this.options = mergeOptions(this.defaultOptions, options);\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\nimport { CookieOptionsProvider } from './cookie-options.provider';\n\nimport { CookieDict, CookieOptions, ICookieService, ICookieWriterService } from './cookie.model';\nimport { COOKIE_WRITER } from './tokens';\nimport { isNil, isPresent, mergeOptions, parseCookieString } from './utils';\n\n@Injectable()\nexport class CookieService implements ICookieService {\n\n  protected options: CookieOptions;\n\n  constructor(@Inject(DOCUMENT) private document: any,\n              private optionsProvider: CookieOptionsProvider,\n              @Inject(COOKIE_WRITER) private cookieWriterService: ICookieWriterService) {\n    this.options = this.optionsProvider.options;\n  }\n\n  /**\n   * @description\n   * Returns if the given cookie key exists or not.\n   *\n   * @param key Id to use for lookup.\n   * @returns true if key exists, otherwise false.\n   */\n  hasKey(key: string): boolean {\n    const value = this.get(key);\n    return isPresent(value);\n  }\n\n  /**\n   * @description\n   * Returns the value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Raw cookie value.\n   */\n  get(key: string): string {\n    return this.getAll()?.[key];\n  }\n\n  /**\n   * @description\n   * Returns the deserialized value of given cookie key.\n   *\n   * @param key Id to use for lookup.\n   * @returns Deserialized cookie value.\n   */\n  getObject(key: string): object | undefined {\n    const value = this.get(key);\n    if (isNil(value)) {\n      return undefined;\n    } else if (value === '') {\n      return {};\n    }\n    return JSON.parse(value);\n  }\n\n  /**\n   * @description\n   * Returns a key value object with all the cookies.\n   *\n   * @returns All cookies\n   */\n  getAll(): CookieDict {\n    const cookieString = this.cookieWriterService.readAllAsString();\n    return parseCookieString(cookieString);\n  }\n\n  /**\n   * @description\n   * Sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Raw value to be stored.\n   * @param options (Optional) Options object.\n   */\n  put(key: string, value: string | undefined, options?: CookieOptions): void {\n    const opts = mergeOptions(this.options, options);\n    this.cookieWriterService.write(key, value, opts);\n  }\n\n  /**\n   * @description\n   * Serializes and sets a value for given cookie key.\n   *\n   * @param key Id for the `value`.\n   * @param value Value to be stored.\n   * @param options (Optional) Options object.\n   */\n  putObject(key: string, value: object, options?: CookieOptions): void {\n    this.put(key, JSON.stringify(value), options);\n  }\n\n  /**\n   * @description\n   * Remove given cookie.\n   *\n   * @param key Id of the key-value pair to delete.\n   * @param options (Optional) Options object.\n   */\n  remove(key: string, options?: CookieOptions): void {\n    this.put(key, undefined, options);\n  }\n\n  /**\n   * @description\n   * Remove all cookies.\n   */\n  removeAll(options?: CookieOptions): void {\n    const cookies = this.getAll();\n    Object.keys(cookies).forEach(key => this.remove(key, options));\n  }\n\n}\n","import { DOCUMENT } from '@angular/common';\nimport { Inject, Injectable } from '@angular/core';\n\nimport { CookieOptions, ICookieWriterService } from './cookie.model';\nimport { buildCookieString } from './utils';\n\n@Injectable()\nexport class CookieWriterService implements ICookieWriterService {\n\n  constructor(@Inject(DOCUMENT) private document: any) {}\n\n  readAllAsString(): string {\n    return this.document.cookie || '';\n  }\n\n  write(name: string, value: string | undefined, options?: CookieOptions): void {\n    this.document.cookie = buildCookieString(name, value, options);\n  }\n\n}\n","import { CookieOptionsProvider } from './cookie-options.provider';\nimport { ICookieWriterService } from './cookie.model';\nimport { CookieService } from './cookie.service';\n\nexport function cookieServiceFactory(document: Document,\n                                     cookieOptionsProvider: CookieOptionsProvider,\n                                     cookieWriterService: ICookieWriterService): CookieService {\n  return new CookieService(document, cookieOptionsProvider, cookieWriterService);\n}\n","import { DOCUMENT } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { CookieWriterService } from './cookie-writer.service';\n\nimport { CookieOptions } from './cookie.model';\nimport { CookieOptionsProvider } from './cookie-options.provider';\nimport { cookieServiceFactory } from './cookie.factory';\nimport { CookieService } from './cookie.service';\nimport { COOKIE_OPTIONS, COOKIE_WRITER } from './tokens';\n\n\n@NgModule({\n  providers: [CookieOptionsProvider]\n})\nexport class CookieModule {\n  /**\n   * Use this method in your root module to provide the CookieService\n   */\n  static forRoot(options: CookieOptions = {}): ModuleWithProviders<CookieModule> {\n    return {\n      ngModule: CookieModule,\n      providers: [\n        {provide: COOKIE_OPTIONS, useValue: options},\n        {provide: COOKIE_WRITER, useClass: CookieWriterService},\n        {provide: CookieService, useFactory: cookieServiceFactory, deps: [DOCUMENT, CookieOptionsProvider, COOKIE_WRITER]}\n      ]\n    };\n  }\n\n  /**\n   * Use this method in your other (non root) modules to import the directive/pipe\n   */\n  static forChild(options: CookieOptions = {}): ModuleWithProviders<CookieModule> {\n    return CookieModule.forRoot(options);\n  }\n}\n","/*\n * Public API Surface of ngx-cookie\n */\n\nexport * from './lib/tokens';\nexport * from './lib/cookie.service';\nexport * from './lib/cookie.module';\nexport * from './lib/cookie.model';\nexport * from './lib/cookie-options.provider';\nexport * from './lib/cookie-writer.service';\nexport * from './lib/cookie.factory';\nexport * from './lib/utils';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}