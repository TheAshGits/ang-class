{"ast":null,"code":"import _classCallCheck from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v10.1.4\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Location, LocationStrategy } from '@angular/common';\nimport { SpyLocation, MockLocationStrategy } from '@angular/common/testing';\nimport { Injectable, Compiler, NgModule, NgModuleFactoryLoader, Injector, Optional } from '@angular/core';\nimport { Router, ɵflatten, provideRoutes, ROUTER_CONFIGURATION, RouterModule, ɵROUTER_PROVIDERS, UrlSerializer, ChildrenOutletContexts, ROUTES, UrlHandlingStrategy, PreloadingStrategy, NoPreloading } from '@angular/router';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.inject(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * @publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar SpyNgModuleFactoryLoader = /*#__PURE__*/function () {\n  function SpyNgModuleFactoryLoader(compiler) {\n    _classCallCheck(this, SpyNgModuleFactoryLoader);\n\n    this.compiler = compiler;\n    /**\n     * @docsNotRequired\n     */\n\n    this._stubbedModules = {};\n  }\n  /**\n   * @docsNotRequired\n   */\n\n\n  _createClass(SpyNgModuleFactoryLoader, [{\n    key: \"load\",\n    value: function load(path) {\n      if (this._stubbedModules[path]) {\n        return this._stubbedModules[path];\n      } else {\n        return Promise.reject(new Error(\"Cannot find module \".concat(path)));\n      }\n    }\n  }, {\n    key: \"stubbedModules\",\n    set: function set(modules) {\n      var res = {};\n\n      for (var _i = 0, _Object$keys = Object.keys(modules); _i < _Object$keys.length; _i++) {\n        var t = _Object$keys[_i];\n        res[t] = this.compiler.compileModuleAsync(modules[t]);\n      }\n\n      this._stubbedModules = res;\n    }\n    /**\n     * @docsNotRequired\n     */\n    ,\n    get: function get() {\n      return this._stubbedModules;\n    }\n  }]);\n\n  return SpyNgModuleFactoryLoader;\n}();\n\nSpyNgModuleFactoryLoader.ɵfac = function SpyNgModuleFactoryLoader_Factory(t) {\n  return new (t || SpyNgModuleFactoryLoader)(ɵngcc0.ɵɵinject(ɵngcc0.Compiler));\n};\n\nSpyNgModuleFactoryLoader.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SpyNgModuleFactoryLoader,\n  factory: SpyNgModuleFactoryLoader.ɵfac\n});\n\nSpyNgModuleFactoryLoader.ctorParameters = function () {\n  return [{\n    type: Compiler\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SpyNgModuleFactoryLoader, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc0.Compiler\n    }];\n  }, null);\n})();\n\nfunction isUrlHandlingStrategy(opts) {\n  // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n  // runtime.\n  return 'shouldProcessUrl' in opts;\n}\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\n\n\nfunction setupTestingRouter(urlSerializer, contexts, location, loader, compiler, injector, routes, opts, urlHandlingStrategy) {\n  var router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, ɵflatten(routes));\n\n  if (opts) {\n    // Handle deprecated argument ordering.\n    if (isUrlHandlingStrategy(opts)) {\n      router.urlHandlingStrategy = opts;\n    } else {\n      // Handle ExtraOptions\n      if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n      }\n\n      if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n      }\n    }\n  }\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n\n  return router;\n}\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\n\n\nvar RouterTestingModule = /*#__PURE__*/function () {\n  function RouterTestingModule() {\n    _classCallCheck(this, RouterTestingModule);\n  }\n\n  _createClass(RouterTestingModule, null, [{\n    key: \"withRoutes\",\n    value: function withRoutes(routes, config) {\n      return {\n        ngModule: RouterTestingModule,\n        providers: [provideRoutes(routes), {\n          provide: ROUTER_CONFIGURATION,\n          useValue: config ? config : {}\n        }]\n      };\n    }\n  }]);\n\n  return RouterTestingModule;\n}();\n\nRouterTestingModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: RouterTestingModule\n});\nRouterTestingModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  factory: function RouterTestingModule_Factory(t) {\n    return new (t || RouterTestingModule)();\n  },\n  providers: [ɵROUTER_PROVIDERS, {\n    provide: Location,\n    useClass: SpyLocation\n  }, {\n    provide: LocationStrategy,\n    useClass: MockLocationStrategy\n  }, {\n    provide: NgModuleFactoryLoader,\n    useClass: SpyNgModuleFactoryLoader\n  }, {\n    provide: Router,\n    useFactory: setupTestingRouter,\n    deps: [UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]]\n  }, {\n    provide: PreloadingStrategy,\n    useExisting: NoPreloading\n  }, provideRoutes([])],\n  imports: [RouterModule]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(RouterTestingModule, {\n    exports: function exports() {\n      return [RouterModule];\n    }\n  });\n})();\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(RouterTestingModule, [{\n    type: NgModule,\n    args: [{\n      exports: [RouterModule],\n      providers: [ɵROUTER_PROVIDERS, {\n        provide: Location,\n        useClass: SpyLocation\n      }, {\n        provide: LocationStrategy,\n        useClass: MockLocationStrategy\n      }, {\n        provide: NgModuleFactoryLoader,\n        useClass: SpyNgModuleFactoryLoader\n      }, {\n        provide: Router,\n        useFactory: setupTestingRouter,\n        deps: [UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector, ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]]\n      }, {\n        provide: PreloadingStrategy,\n        useExisting: NoPreloading\n      }, provideRoutes([])]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { RouterTestingModule, SpyNgModuleFactoryLoader, setupTestingRouter };","map":{"version":3,"sources":["../../../../../../packages/router/testing/src/router_testing_module.ts","../../../../../../packages/router/testing/src/testing.ts","../../../../../../packages/router/testing/public_api.ts","../../../../../../packages/router/testing/index.ts","../../../../../../packages/router/testing/testing.ts"],"names":["flatten"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy} from '@angular/common';\nimport {MockLocationStrategy, SpyLocation} from '@angular/common/testing';\nimport {Compiler, Injectable, Injector, ModuleWithProviders, NgModule, NgModuleFactory, NgModuleFactoryLoader, Optional} from '@angular/core';\nimport {ChildrenOutletContexts, ExtraOptions, NoPreloading, PreloadingStrategy, provideRoutes, Route, Router, ROUTER_CONFIGURATION, RouterModule, ROUTES, Routes, UrlHandlingStrategy, UrlSerializer, ɵflatten as flatten, ɵROUTER_PROVIDERS as ROUTER_PROVIDERS} from '@angular/router';\n\n\n\n/**\n * @description\n *\n * Allows to simulate the loading of ng modules in tests.\n *\n * ```\n * const loader = TestBed.inject(NgModuleFactoryLoader);\n *\n * @Component({template: 'lazy-loaded'})\n * class LazyLoadedComponent {}\n * @NgModule({\n *   declarations: [LazyLoadedComponent],\n *   imports: [RouterModule.forChild([{path: 'loaded', component: LazyLoadedComponent}])]\n * })\n *\n * class LoadedModule {}\n *\n * // sets up stubbedModules\n * loader.stubbedModules = {lazyModule: LoadedModule};\n *\n * router.resetConfig([\n *   {path: 'lazy', loadChildren: 'lazyModule'},\n * ]);\n *\n * router.navigateByUrl('/lazy/loaded');\n * ```\n *\n * @publicApi\n */\n@Injectable()\nexport class SpyNgModuleFactoryLoader implements NgModuleFactoryLoader {\n  /**\n   * @docsNotRequired\n   */\n  private _stubbedModules: {[path: string]: Promise<NgModuleFactory<any>>} = {};\n\n  /**\n   * @docsNotRequired\n   */\n  set stubbedModules(modules: {[path: string]: any}) {\n    const res: {[path: string]: any} = {};\n    for (const t of Object.keys(modules)) {\n      res[t] = this.compiler.compileModuleAsync(modules[t]);\n    }\n    this._stubbedModules = res;\n  }\n\n  /**\n   * @docsNotRequired\n   */\n  get stubbedModules(): {[path: string]: any} {\n    return this._stubbedModules;\n  }\n\n  constructor(private compiler: Compiler) {}\n\n  load(path: string): Promise<NgModuleFactory<any>> {\n    if (this._stubbedModules[path]) {\n      return this._stubbedModules[path];\n    } else {\n      return <any>Promise.reject(new Error(`Cannot find module ${path}`));\n    }\n  }\n}\n\nfunction isUrlHandlingStrategy(opts: ExtraOptions|\n                               UrlHandlingStrategy): opts is UrlHandlingStrategy {\n  // This property check is needed because UrlHandlingStrategy is an interface and doesn't exist at\n  // runtime.\n  return 'shouldProcessUrl' in opts;\n}\n\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    opts?: ExtraOptions, urlHandlingStrategy?: UrlHandlingStrategy): Router;\n\n/**\n * Router setup factory function used for testing.\n *\n * @deprecated As of v5.2. The 2nd-to-last argument should be `ExtraOptions`, not\n * `UrlHandlingStrategy`\n * @publicApi\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    urlHandlingStrategy?: UrlHandlingStrategy): Router;\n\n/**\n * Router setup factory function used for testing.\n *\n * @publicApi\n */\nexport function setupTestingRouter(\n    urlSerializer: UrlSerializer, contexts: ChildrenOutletContexts, location: Location,\n    loader: NgModuleFactoryLoader, compiler: Compiler, injector: Injector, routes: Route[][],\n    opts?: ExtraOptions|UrlHandlingStrategy, urlHandlingStrategy?: UrlHandlingStrategy) {\n  const router = new Router(\n      null!, urlSerializer, contexts, location, injector, loader, compiler, flatten(routes));\n  if (opts) {\n    // Handle deprecated argument ordering.\n    if (isUrlHandlingStrategy(opts)) {\n      router.urlHandlingStrategy = opts;\n    } else {\n      // Handle ExtraOptions\n\n      if (opts.malformedUriErrorHandler) {\n        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;\n      }\n\n      if (opts.paramsInheritanceStrategy) {\n        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;\n      }\n    }\n  }\n\n  if (urlHandlingStrategy) {\n    router.urlHandlingStrategy = urlHandlingStrategy;\n  }\n  return router;\n}\n\n/**\n * @description\n *\n * Sets up the router to be used for testing.\n *\n * The modules sets up the router to be used for testing.\n * It provides spy implementations of `Location`, `LocationStrategy`, and {@link\n * NgModuleFactoryLoader}.\n *\n * @usageNotes\n * ### Example\n *\n * ```\n * beforeEach(() => {\n *   TestBed.configureTestingModule({\n *     imports: [\n *       RouterTestingModule.withRoutes(\n *         [{path: '', component: BlankCmp}, {path: 'simple', component: SimpleCmp}]\n *       )\n *     ]\n *   });\n * });\n * ```\n *\n * @publicApi\n */\n@NgModule({\n  exports: [RouterModule],\n  providers: [\n    ROUTER_PROVIDERS, {provide: Location, useClass: SpyLocation},\n    {provide: LocationStrategy, useClass: MockLocationStrategy},\n    {provide: NgModuleFactoryLoader, useClass: SpyNgModuleFactoryLoader}, {\n      provide: Router,\n      useFactory: setupTestingRouter,\n      deps: [\n        UrlSerializer, ChildrenOutletContexts, Location, NgModuleFactoryLoader, Compiler, Injector,\n        ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new Optional()]\n      ]\n    },\n    {provide: PreloadingStrategy, useExisting: NoPreloading}, provideRoutes([])\n  ]\n})\nexport class RouterTestingModule {\n  static withRoutes(routes: Routes, config?: ExtraOptions):\n      ModuleWithProviders<RouterTestingModule> {\n    return {\n      ngModule: RouterTestingModule,\n      providers: [\n        provideRoutes(routes),\n        {provide: ROUTER_CONFIGURATION, useValue: config ? config : {}},\n      ]\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the router/testing package.\n */\nexport * from './router_testing_module';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}