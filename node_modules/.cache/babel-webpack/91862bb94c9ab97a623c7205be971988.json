{"ast":null,"code":"import _inherits from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ashleighkeplinger/Documents/GitHub/ang-class/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license Angular v10.1.4\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { EventEmitter, Injectable, InjectionToken, Inject, Optional } from '@angular/core';\nimport { LocationStrategy } from '@angular/common';\nimport { Subject } from 'rxjs';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar SpyLocation = /*#__PURE__*/function () {\n  function SpyLocation() {\n    _classCallCheck(this, SpyLocation);\n\n    this.urlChanges = [];\n    this._history = [new LocationState('', '', null)];\n    this._historyIndex = 0;\n    /** @internal */\n\n    this._subject = new EventEmitter();\n    /** @internal */\n\n    this._baseHref = '';\n    /** @internal */\n\n    this._platformStrategy = null;\n    /** @internal */\n\n    this._platformLocation = null;\n    /** @internal */\n\n    this._urlChangeListeners = [];\n  }\n\n  _createClass(SpyLocation, [{\n    key: \"setInitialPath\",\n    value: function setInitialPath(url) {\n      this._history[this._historyIndex].path = url;\n    }\n  }, {\n    key: \"setBaseHref\",\n    value: function setBaseHref(url) {\n      this._baseHref = url;\n    }\n  }, {\n    key: \"path\",\n    value: function path() {\n      return this._history[this._historyIndex].path;\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this._history[this._historyIndex].state;\n    }\n  }, {\n    key: \"isCurrentPathEqualTo\",\n    value: function isCurrentPathEqualTo(path) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n      var currPath = this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n      return currPath == givenPath + (query.length > 0 ? '?' + query : '');\n    }\n  }, {\n    key: \"simulateUrlPop\",\n    value: function simulateUrlPop(pathname) {\n      this._subject.emit({\n        'url': pathname,\n        'pop': true,\n        'type': 'popstate'\n      });\n    }\n  }, {\n    key: \"simulateHashChange\",\n    value: function simulateHashChange(pathname) {\n      // Because we don't prevent the native event, the browser will independently update the path\n      this.setInitialPath(pathname);\n      this.urlChanges.push('hash: ' + pathname);\n\n      this._subject.emit({\n        'url': pathname,\n        'pop': true,\n        'type': 'hashchange'\n      });\n    }\n  }, {\n    key: \"prepareExternalUrl\",\n    value: function prepareExternalUrl(url) {\n      if (url.length > 0 && !url.startsWith('/')) {\n        url = '/' + url;\n      }\n\n      return this._baseHref + url;\n    }\n  }, {\n    key: \"go\",\n    value: function go(path) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      path = this.prepareExternalUrl(path);\n\n      if (this._historyIndex > 0) {\n        this._history.splice(this._historyIndex + 1);\n      }\n\n      this._history.push(new LocationState(path, query, state));\n\n      this._historyIndex = this._history.length - 1;\n      var locationState = this._history[this._historyIndex - 1];\n\n      if (locationState.path == path && locationState.query == query) {\n        return;\n      }\n\n      var url = path + (query.length > 0 ? '?' + query : '');\n      this.urlChanges.push(url);\n\n      this._subject.emit({\n        'url': url,\n        'pop': false\n      });\n    }\n  }, {\n    key: \"replaceState\",\n    value: function replaceState(path) {\n      var query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      path = this.prepareExternalUrl(path);\n      var history = this._history[this._historyIndex];\n\n      if (history.path == path && history.query == query) {\n        return;\n      }\n\n      history.path = path;\n      history.query = query;\n      history.state = state;\n      var url = path + (query.length > 0 ? '?' + query : '');\n      this.urlChanges.push('replace: ' + url);\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      if (this._historyIndex < this._history.length - 1) {\n        this._historyIndex++;\n\n        this._subject.emit({\n          'url': this.path(),\n          'state': this.getState(),\n          'pop': true\n        });\n      }\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      if (this._historyIndex > 0) {\n        this._historyIndex--;\n\n        this._subject.emit({\n          'url': this.path(),\n          'state': this.getState(),\n          'pop': true\n        });\n      }\n    }\n  }, {\n    key: \"onUrlChange\",\n    value: function onUrlChange(fn) {\n      var _this = this;\n\n      this._urlChangeListeners.push(fn);\n\n      if (!this._urlChangeSubscription) {\n        this._urlChangeSubscription = this.subscribe(function (v) {\n          _this._notifyUrlChangeListeners(v.url, v.state);\n        });\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"_notifyUrlChangeListeners\",\n    value: function _notifyUrlChangeListeners() {\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var state = arguments.length > 1 ? arguments[1] : undefined;\n\n      this._urlChangeListeners.forEach(function (fn) {\n        return fn(url, state);\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(onNext, onThrow, onReturn) {\n      return this._subject.subscribe({\n        next: onNext,\n        error: onThrow,\n        complete: onReturn\n      });\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(url) {\n      return null;\n    }\n  }]);\n\n  return SpyLocation;\n}();\n\nSpyLocation.ɵfac = function SpyLocation_Factory(t) {\n  return new (t || SpyLocation)();\n};\n\nSpyLocation.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: SpyLocation,\n  factory: SpyLocation.ɵfac\n});\n/*@__PURE__*/\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(SpyLocation, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar LocationState = function LocationState(path, query, state) {\n  _classCallCheck(this, LocationState);\n\n  this.path = path;\n  this.query = query;\n  this.state = state;\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\n\n\nvar MockLocationStrategy = /*#__PURE__*/function (_LocationStrategy) {\n  _inherits(MockLocationStrategy, _LocationStrategy);\n\n  var _super = _createSuper(MockLocationStrategy);\n\n  function MockLocationStrategy() {\n    var _this2;\n\n    _classCallCheck(this, MockLocationStrategy);\n\n    _this2 = _super.call(this);\n    _this2.internalBaseHref = '/';\n    _this2.internalPath = '/';\n    _this2.internalTitle = '';\n    _this2.urlChanges = [];\n    /** @internal */\n\n    _this2._subject = new EventEmitter();\n    _this2.stateChanges = [];\n    return _this2;\n  }\n\n  _createClass(MockLocationStrategy, [{\n    key: \"simulatePopState\",\n    value: function simulatePopState(url) {\n      this.internalPath = url;\n\n      this._subject.emit(new _MockPopStateEvent(this.path()));\n    }\n  }, {\n    key: \"path\",\n    value: function path() {\n      var includeHash = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this.internalPath;\n    }\n  }, {\n    key: \"prepareExternalUrl\",\n    value: function prepareExternalUrl(internal) {\n      if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n        return this.internalBaseHref + internal.substring(1);\n      }\n\n      return this.internalBaseHref + internal;\n    }\n  }, {\n    key: \"pushState\",\n    value: function pushState(ctx, title, path, query) {\n      // Add state change to changes array\n      this.stateChanges.push(ctx);\n      this.internalTitle = title;\n      var url = path + (query.length > 0 ? '?' + query : '');\n      this.internalPath = url;\n      var externalUrl = this.prepareExternalUrl(url);\n      this.urlChanges.push(externalUrl);\n    }\n  }, {\n    key: \"replaceState\",\n    value: function replaceState(ctx, title, path, query) {\n      // Reset the last index of stateChanges to the ctx (state) object\n      this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n      this.internalTitle = title;\n      var url = path + (query.length > 0 ? '?' + query : '');\n      this.internalPath = url;\n      var externalUrl = this.prepareExternalUrl(url);\n      this.urlChanges.push('replace: ' + externalUrl);\n    }\n  }, {\n    key: \"onPopState\",\n    value: function onPopState(fn) {\n      this._subject.subscribe({\n        next: fn\n      });\n    }\n  }, {\n    key: \"getBaseHref\",\n    value: function getBaseHref() {\n      return this.internalBaseHref;\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      if (this.urlChanges.length > 0) {\n        this.urlChanges.pop();\n        this.stateChanges.pop();\n        var nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n        this.simulatePopState(nextUrl);\n      }\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      throw 'not implemented';\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.stateChanges[(this.stateChanges.length || 1) - 1];\n    }\n  }]);\n\n  return MockLocationStrategy;\n}(LocationStrategy);\n\nMockLocationStrategy.ɵfac = function MockLocationStrategy_Factory(t) {\n  return new (t || MockLocationStrategy)();\n};\n\nMockLocationStrategy.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MockLocationStrategy,\n  factory: MockLocationStrategy.ɵfac\n});\n\nMockLocationStrategy.ctorParameters = function () {\n  return [];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MockLocationStrategy, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n\nvar _MockPopStateEvent = function _MockPopStateEvent(newUrl) {\n  _classCallCheck(this, _MockPopStateEvent);\n\n  this.newUrl = newUrl;\n  this.pop = true;\n  this.type = 'popstate';\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\n\n\nvar urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\nfunction parseUrl(urlStr, baseHref) {\n  var verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  var serverBase; // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n\n  var parsedUrl;\n\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    var result = urlParse.exec(serverBase || '' + urlStr);\n\n    if (!result) {\n      throw new Error(\"Invalid URL: \".concat(urlStr, \" with base: \").concat(baseHref));\n    }\n\n    var hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8]\n    };\n  }\n\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n\n  return {\n    hostname: !serverBase && parsedUrl.hostname || '',\n    protocol: !serverBase && parsedUrl.protocol || '',\n    port: !serverBase && parsedUrl.port || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || ''\n  };\n}\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\n\n\nvar MOCK_PLATFORM_LOCATION_CONFIG = new InjectionToken('MOCK_PLATFORM_LOCATION_CONFIG');\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\n\nvar MockPlatformLocation = /*#__PURE__*/function () {\n  function MockPlatformLocation(config) {\n    _classCallCheck(this, MockPlatformLocation);\n\n    this.baseHref = '';\n    this.hashUpdate = new Subject();\n    this.urlChanges = [{\n      hostname: '',\n      protocol: '',\n      port: '',\n      pathname: '/',\n      search: '',\n      hash: '',\n      state: null\n    }];\n\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n      var parsedChanges = this.parseChanges(null, config.startUrl || 'http://<empty>/', this.baseHref);\n      this.urlChanges[0] = Object.assign({}, parsedChanges);\n    }\n  }\n\n  _createClass(MockPlatformLocation, [{\n    key: \"getBaseHrefFromDOM\",\n    value: function getBaseHrefFromDOM() {\n      return this.baseHref;\n    }\n  }, {\n    key: \"onPopState\",\n    value: function onPopState(fn) {// No-op: a state stack is not implemented, so\n      // no events will ever come.\n    }\n  }, {\n    key: \"onHashChange\",\n    value: function onHashChange(fn) {\n      this.hashUpdate.subscribe(fn);\n    }\n  }, {\n    key: \"parseChanges\",\n    value: function parseChanges(state, url) {\n      var baseHref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      // When the `history.state` value is stored, it is always copied.\n      state = JSON.parse(JSON.stringify(state));\n      return Object.assign(Object.assign({}, parseUrl(url, baseHref)), {\n        state: state\n      });\n    }\n  }, {\n    key: \"replaceState\",\n    value: function replaceState(state, title, newUrl) {\n      var _this$parseChanges = this.parseChanges(state, newUrl),\n          pathname = _this$parseChanges.pathname,\n          search = _this$parseChanges.search,\n          parsedState = _this$parseChanges.state,\n          hash = _this$parseChanges.hash;\n\n      this.urlChanges[0] = Object.assign(Object.assign({}, this.urlChanges[0]), {\n        pathname: pathname,\n        search: search,\n        hash: hash,\n        state: parsedState\n      });\n    }\n  }, {\n    key: \"pushState\",\n    value: function pushState(state, title, newUrl) {\n      var _this$parseChanges2 = this.parseChanges(state, newUrl),\n          pathname = _this$parseChanges2.pathname,\n          search = _this$parseChanges2.search,\n          parsedState = _this$parseChanges2.state,\n          hash = _this$parseChanges2.hash;\n\n      this.urlChanges.unshift(Object.assign(Object.assign({}, this.urlChanges[0]), {\n        pathname: pathname,\n        search: search,\n        hash: hash,\n        state: parsedState\n      }));\n    }\n  }, {\n    key: \"forward\",\n    value: function forward() {\n      throw new Error('Not implemented');\n    }\n  }, {\n    key: \"back\",\n    value: function back() {\n      var _this3 = this;\n\n      var oldUrl = this.url;\n      var oldHash = this.hash;\n      this.urlChanges.shift();\n      var newHash = this.hash;\n\n      if (oldHash !== newHash) {\n        scheduleMicroTask(function () {\n          return _this3.hashUpdate.next({\n            type: 'hashchange',\n            state: null,\n            oldUrl: oldUrl,\n            newUrl: _this3.url\n          });\n        });\n      }\n    }\n  }, {\n    key: \"getState\",\n    value: function getState() {\n      return this.state;\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      return this.urlChanges[0].hostname;\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      return this.urlChanges[0].protocol;\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      return this.urlChanges[0].port;\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      return this.urlChanges[0].pathname;\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      return this.urlChanges[0].search;\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      return this.urlChanges[0].hash;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this.urlChanges[0].state;\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      var url = \"\".concat(this.protocol, \"//\").concat(this.hostname).concat(this.port ? ':' + this.port : '');\n      url += \"\".concat(this.pathname === '/' ? '' : this.pathname).concat(this.search).concat(this.hash);\n      return url;\n    }\n  }, {\n    key: \"url\",\n    get: function get() {\n      return \"\".concat(this.pathname).concat(this.search).concat(this.hash);\n    }\n  }]);\n\n  return MockPlatformLocation;\n}();\n\nMockPlatformLocation.ɵfac = function MockPlatformLocation_Factory(t) {\n  return new (t || MockPlatformLocation)(ɵngcc0.ɵɵinject(MOCK_PLATFORM_LOCATION_CONFIG, 8));\n};\n\nMockPlatformLocation.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: MockPlatformLocation,\n  factory: MockPlatformLocation.ɵfac\n});\n\nMockPlatformLocation.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [MOCK_PLATFORM_LOCATION_CONFIG]\n    }, {\n      type: Optional\n    }]\n  }];\n};\n/*@__PURE__*/\n\n\n(function () {\n  ɵngcc0.ɵsetClassMetadata(MockPlatformLocation, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MOCK_PLATFORM_LOCATION_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n\nfunction scheduleMicroTask(cb) {\n  Promise.resolve(null).then(cb);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// This file only reexports content of the `src` folder. Keep it that way.\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MOCK_PLATFORM_LOCATION_CONFIG, MockLocationStrategy, MockPlatformLocation, SpyLocation };","map":{"version":3,"sources":["../../../../../../packages/common/testing/src/location_mock.ts","../../../../../../packages/common/testing/src/mock_location_strategy.ts","../../../../../../packages/common/testing/src/mock_platform_location.ts","../../../../../../packages/common/testing/src/testing.ts","../../../../../../packages/common/testing/public_api.ts","../../../../../../packages/common/testing/index.ts","../../../../../../packages/common/testing/testing.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location, LocationStrategy, PlatformLocation} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\nimport {SubscriptionLike} from 'rxjs';\n\n/**\n * A spy for {@link Location} that allows tests to fire simulated location events.\n *\n * @publicApi\n */\n@Injectable()\nexport class SpyLocation implements Location {\n  urlChanges: string[] = [];\n  private _history: LocationState[] = [new LocationState('', '', null)];\n  private _historyIndex: number = 0;\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  /** @internal */\n  _baseHref: string = '';\n  /** @internal */\n  _platformStrategy: LocationStrategy = null!;\n  /** @internal */\n  _platformLocation: PlatformLocation = null!;\n  /** @internal */\n  _urlChangeListeners: ((url: string, state: unknown) => void)[] = [];\n  /** @internal */\n  _urlChangeSubscription?: SubscriptionLike;\n\n  setInitialPath(url: string) {\n    this._history[this._historyIndex].path = url;\n  }\n\n  setBaseHref(url: string) {\n    this._baseHref = url;\n  }\n\n  path(): string {\n    return this._history[this._historyIndex].path;\n  }\n\n  getState(): unknown {\n    return this._history[this._historyIndex].state;\n  }\n\n  isCurrentPathEqualTo(path: string, query: string = ''): boolean {\n    const givenPath = path.endsWith('/') ? path.substring(0, path.length - 1) : path;\n    const currPath =\n        this.path().endsWith('/') ? this.path().substring(0, this.path().length - 1) : this.path();\n\n    return currPath == givenPath + (query.length > 0 ? ('?' + query) : '');\n  }\n\n  simulateUrlPop(pathname: string) {\n    this._subject.emit({'url': pathname, 'pop': true, 'type': 'popstate'});\n  }\n\n  simulateHashChange(pathname: string) {\n    // Because we don't prevent the native event, the browser will independently update the path\n    this.setInitialPath(pathname);\n    this.urlChanges.push('hash: ' + pathname);\n    this._subject.emit({'url': pathname, 'pop': true, 'type': 'hashchange'});\n  }\n\n  prepareExternalUrl(url: string): string {\n    if (url.length > 0 && !url.startsWith('/')) {\n      url = '/' + url;\n    }\n    return this._baseHref + url;\n  }\n\n  go(path: string, query: string = '', state: any = null) {\n    path = this.prepareExternalUrl(path);\n\n    if (this._historyIndex > 0) {\n      this._history.splice(this._historyIndex + 1);\n    }\n    this._history.push(new LocationState(path, query, state));\n    this._historyIndex = this._history.length - 1;\n\n    const locationState = this._history[this._historyIndex - 1];\n    if (locationState.path == path && locationState.query == query) {\n      return;\n    }\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.urlChanges.push(url);\n    this._subject.emit({'url': url, 'pop': false});\n  }\n\n  replaceState(path: string, query: string = '', state: any = null) {\n    path = this.prepareExternalUrl(path);\n\n    const history = this._history[this._historyIndex];\n    if (history.path == path && history.query == query) {\n      return;\n    }\n\n    history.path = path;\n    history.query = query;\n    history.state = state;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.urlChanges.push('replace: ' + url);\n  }\n\n  forward() {\n    if (this._historyIndex < (this._history.length - 1)) {\n      this._historyIndex++;\n      this._subject.emit({'url': this.path(), 'state': this.getState(), 'pop': true});\n    }\n  }\n\n  back() {\n    if (this._historyIndex > 0) {\n      this._historyIndex--;\n      this._subject.emit({'url': this.path(), 'state': this.getState(), 'pop': true});\n    }\n  }\n  onUrlChange(fn: (url: string, state: unknown) => void) {\n    this._urlChangeListeners.push(fn);\n\n    if (!this._urlChangeSubscription) {\n      this._urlChangeSubscription = this.subscribe(v => {\n        this._notifyUrlChangeListeners(v.url, v.state);\n      });\n    }\n  }\n\n  /** @internal */\n  _notifyUrlChangeListeners(url: string = '', state: unknown) {\n    this._urlChangeListeners.forEach(fn => fn(url, state));\n  }\n\n  subscribe(\n      onNext: (value: any) => void, onThrow?: ((error: any) => void)|null,\n      onReturn?: (() => void)|null): SubscriptionLike {\n    return this._subject.subscribe({next: onNext, error: onThrow, complete: onReturn});\n  }\n\n  normalize(url: string): string {\n    return null!;\n  }\n}\n\nclass LocationState {\n  constructor(public path: string, public query: string, public state: any) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationStrategy} from '@angular/common';\nimport {EventEmitter, Injectable} from '@angular/core';\n\n\n\n/**\n * A mock implementation of {@link LocationStrategy} that allows tests to fire simulated\n * location events.\n *\n * @publicApi\n */\n@Injectable()\nexport class MockLocationStrategy extends LocationStrategy {\n  internalBaseHref: string = '/';\n  internalPath: string = '/';\n  internalTitle: string = '';\n  urlChanges: string[] = [];\n  /** @internal */\n  _subject: EventEmitter<any> = new EventEmitter();\n  private stateChanges: any[] = [];\n  constructor() {\n    super();\n  }\n\n  simulatePopState(url: string): void {\n    this.internalPath = url;\n    this._subject.emit(new _MockPopStateEvent(this.path()));\n  }\n\n  path(includeHash: boolean = false): string {\n    return this.internalPath;\n  }\n\n  prepareExternalUrl(internal: string): string {\n    if (internal.startsWith('/') && this.internalBaseHref.endsWith('/')) {\n      return this.internalBaseHref + internal.substring(1);\n    }\n    return this.internalBaseHref + internal;\n  }\n\n  pushState(ctx: any, title: string, path: string, query: string): void {\n    // Add state change to changes array\n    this.stateChanges.push(ctx);\n\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push(externalUrl);\n  }\n\n  replaceState(ctx: any, title: string, path: string, query: string): void {\n    // Reset the last index of stateChanges to the ctx (state) object\n    this.stateChanges[(this.stateChanges.length || 1) - 1] = ctx;\n\n    this.internalTitle = title;\n\n    const url = path + (query.length > 0 ? ('?' + query) : '');\n    this.internalPath = url;\n\n    const externalUrl = this.prepareExternalUrl(url);\n    this.urlChanges.push('replace: ' + externalUrl);\n  }\n\n  onPopState(fn: (value: any) => void): void {\n    this._subject.subscribe({next: fn});\n  }\n\n  getBaseHref(): string {\n    return this.internalBaseHref;\n  }\n\n  back(): void {\n    if (this.urlChanges.length > 0) {\n      this.urlChanges.pop();\n      this.stateChanges.pop();\n      const nextUrl = this.urlChanges.length > 0 ? this.urlChanges[this.urlChanges.length - 1] : '';\n      this.simulatePopState(nextUrl);\n    }\n  }\n\n  forward(): void {\n    throw 'not implemented';\n  }\n\n  getState(): unknown {\n    return this.stateChanges[(this.stateChanges.length || 1) - 1];\n  }\n}\n\nclass _MockPopStateEvent {\n  pop: boolean = true;\n  type: string = 'popstate';\n  constructor(public newUrl: string) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeEvent, LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * Parser from https://tools.ietf.org/html/rfc3986#appendix-B\n * ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?\n *  12            3  4          5       6  7        8 9\n *\n * Example: http://www.ics.uci.edu/pub/ietf/uri/#Related\n *\n * Results in:\n *\n * $1 = http:\n * $2 = http\n * $3 = //www.ics.uci.edu\n * $4 = www.ics.uci.edu\n * $5 = /pub/ietf/uri/\n * $6 = <undefined>\n * $7 = <undefined>\n * $8 = #Related\n * $9 = Related\n */\nconst urlParse = /^(([^:\\/?#]+):)?(\\/\\/([^\\/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\nfunction parseUrl(urlStr: string, baseHref: string) {\n  const verifyProtocol = /^((http[s]?|ftp):\\/\\/)/;\n  let serverBase: string|undefined;\n\n  // URL class requires full URL. If the URL string doesn't start with protocol, we need to add\n  // an arbitrary base URL which can be removed afterward.\n  if (!verifyProtocol.test(urlStr)) {\n    serverBase = 'http://empty.com/';\n  }\n  let parsedUrl: {\n    protocol: string,\n    hostname: string,\n    port: string,\n    pathname: string,\n    search: string,\n    hash: string\n  };\n  try {\n    parsedUrl = new URL(urlStr, serverBase);\n  } catch (e) {\n    const result = urlParse.exec(serverBase || '' + urlStr);\n    if (!result) {\n      throw new Error(`Invalid URL: ${urlStr} with base: ${baseHref}`);\n    }\n    const hostSplit = result[4].split(':');\n    parsedUrl = {\n      protocol: result[1],\n      hostname: hostSplit[0],\n      port: hostSplit[1] || '',\n      pathname: result[5],\n      search: result[6],\n      hash: result[8],\n    };\n  }\n  if (parsedUrl.pathname && parsedUrl.pathname.indexOf(baseHref) === 0) {\n    parsedUrl.pathname = parsedUrl.pathname.substring(baseHref.length);\n  }\n  return {\n    hostname: !serverBase && parsedUrl.hostname || '',\n    protocol: !serverBase && parsedUrl.protocol || '',\n    port: !serverBase && parsedUrl.port || '',\n    pathname: parsedUrl.pathname || '/',\n    search: parsedUrl.search || '',\n    hash: parsedUrl.hash || '',\n  };\n}\n\n/**\n * Mock platform location config\n *\n * @publicApi\n */\nexport interface MockPlatformLocationConfig {\n  startUrl?: string;\n  appBaseHref?: string;\n}\n\n/**\n * Provider for mock platform location config\n *\n * @publicApi\n */\nexport const MOCK_PLATFORM_LOCATION_CONFIG =\n    new InjectionToken<MockPlatformLocationConfig>('MOCK_PLATFORM_LOCATION_CONFIG');\n\n/**\n * Mock implementation of URL state.\n *\n * @publicApi\n */\n@Injectable()\nexport class MockPlatformLocation implements PlatformLocation {\n  private baseHref: string = '';\n  private hashUpdate = new Subject<LocationChangeEvent>();\n  private urlChanges: {\n    hostname: string,\n    protocol: string,\n    port: string,\n    pathname: string,\n    search: string,\n    hash: string,\n    state: unknown\n  }[] = [{hostname: '', protocol: '', port: '', pathname: '/', search: '', hash: '', state: null}];\n\n  constructor(@Inject(MOCK_PLATFORM_LOCATION_CONFIG) @Optional() config?:\n                  MockPlatformLocationConfig) {\n    if (config) {\n      this.baseHref = config.appBaseHref || '';\n\n      const parsedChanges =\n          this.parseChanges(null, config.startUrl || 'http://<empty>/', this.baseHref);\n      this.urlChanges[0] = {...parsedChanges};\n    }\n  }\n\n  get hostname() {\n    return this.urlChanges[0].hostname;\n  }\n  get protocol() {\n    return this.urlChanges[0].protocol;\n  }\n  get port() {\n    return this.urlChanges[0].port;\n  }\n  get pathname() {\n    return this.urlChanges[0].pathname;\n  }\n  get search() {\n    return this.urlChanges[0].search;\n  }\n  get hash() {\n    return this.urlChanges[0].hash;\n  }\n  get state() {\n    return this.urlChanges[0].state;\n  }\n\n\n  getBaseHrefFromDOM(): string {\n    return this.baseHref;\n  }\n\n  onPopState(fn: LocationChangeListener): void {\n    // No-op: a state stack is not implemented, so\n    // no events will ever come.\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    this.hashUpdate.subscribe(fn);\n  }\n\n  get href(): string {\n    let url = `${this.protocol}//${this.hostname}${this.port ? ':' + this.port : ''}`;\n    url += `${this.pathname === '/' ? '' : this.pathname}${this.search}${this.hash}`;\n    return url;\n  }\n\n  get url(): string {\n    return `${this.pathname}${this.search}${this.hash}`;\n  }\n\n  private parseChanges(state: unknown, url: string, baseHref: string = '') {\n    // When the `history.state` value is stored, it is always copied.\n    state = JSON.parse(JSON.stringify(state));\n    return {...parseUrl(url, baseHref), state};\n  }\n\n  replaceState(state: any, title: string, newUrl: string): void {\n    const {pathname, search, state: parsedState, hash} = this.parseChanges(state, newUrl);\n\n    this.urlChanges[0] = {...this.urlChanges[0], pathname, search, hash, state: parsedState};\n  }\n\n  pushState(state: any, title: string, newUrl: string): void {\n    const {pathname, search, state: parsedState, hash} = this.parseChanges(state, newUrl);\n    this.urlChanges.unshift({...this.urlChanges[0], pathname, search, hash, state: parsedState});\n  }\n\n  forward(): void {\n    throw new Error('Not implemented');\n  }\n\n  back(): void {\n    const oldUrl = this.url;\n    const oldHash = this.hash;\n    this.urlChanges.shift();\n    const newHash = this.hash;\n\n    if (oldHash !== newHash) {\n      scheduleMicroTask(\n          () => this.hashUpdate.next(\n              {type: 'hashchange', state: null, oldUrl, newUrl: this.url} as LocationChangeEvent));\n    }\n  }\n\n  getState(): unknown {\n    return this.state;\n  }\n}\n\nexport function scheduleMicroTask(cb: () => any) {\n  Promise.resolve(null).then(cb);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common/testing package.\n */\nexport {SpyLocation} from './location_mock';\nexport {MockLocationStrategy} from './mock_location_strategy';\nexport {MOCK_PLATFORM_LOCATION_CONFIG, MockPlatformLocation, MockPlatformLocationConfig} from './mock_platform_location';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of this package.\n */\nexport * from './src/testing';\n\n// This file only reexports content of the `src` folder. Keep it that way.\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// This file is not used to build this module. It is only used during editing\n// by the TypeScript language service and during build for verification. `ngc`\n// replaces this file with production index.ts when it rewrites private symbol\n// names.\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}